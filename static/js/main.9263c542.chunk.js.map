{"version":3,"sources":["components/EntryForm/EntryForm.module.scss","components/TimeRow/TimeRow.module.scss","components/TaskList/TaskList.module.scss","components/App/App.module.scss","actions/index.js","components/EntryForm/EntryForm.js","containers/EntryFormContainer.js","components/FormattedDuration/FormattedDuration.js","components/FormattedTime/FormattedTime.js","components/TimeRow/TimeRow.js","components/TaskRow/TaskRow.js","containers/TaskRowContainer.js","components/TaskList/TaskList.js","containers/TaskListContainer.js","components/App/App.js","reducers/currentTime.js","reducers/times.js","reducers/index.js","index.js","components/TaskRow/TaskRow.module.scss"],"names":["module","exports","putTime","recordedTime","taskName","type","EntryForm","props","state","editMode","currentTime","format","enterEditMode","bind","handleChangeTime","recordTimeEntry","resetForm","updateTime","updateTaskName","timeEntryRef","React","createRef","this","setState","timeParts","trim","toLowerCase","match","undefined","parseInt","toString","padStart","event","target","value","preventDefault","timeEntry","formatRecordedTime","length","className","styles","onSubmit","resetButton","onClick","src","timeIcon","alt","timeValue","onChange","onFocus","placeholder","startButton","Component","connect","ownProps","dispatch","FormattedDuration","totalMinutes","duration","hours","Math","floor","FormattedTime","moment","time","TimeRow","deleteTime","deleteButton","TaskRow","expanded","continueTask","toggleDetails","task","summary","toggleButton","arrowIcon","continueButton","details","hidden","timeEntries","map","i","key","TaskList","tasks","emptyState","TaskRowContainer","recordedTasks","taskIndex","times","reduce","push","Object","values","sort","a","b","localeCompare","App","EntryFormContainer","taskBody","TaskListContainer","action","reorderState","recalculateDurations","index","today","nextTime","startOf","max","diff","assign","newState","findIndex","slice","latest","combineReducers","store","createStore","rootReducer","timeoutSeconds","updateCurrentTime","setTimeout","setInterval","render","document","getElementById"],"mappings":"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","file":"static/js/main.9263c542.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"EntryForm\":\"EntryForm_EntryForm__sUeHk\",\"resetButton\":\"EntryForm_resetButton__3FDzF\",\"recordedTime\":\"EntryForm_recordedTime__34jTL\",\"taskName\":\"EntryForm_taskName__3jcaW\",\"startButton\":\"EntryForm_startButton__30pG8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimeRow\":\"TimeRow_TimeRow__1SQse\",\"duration\":\"TimeRow_duration__31OMX\",\"recordedTime\":\"TimeRow_recordedTime__1pRB1\",\"deleteButton\":\"TimeRow_deleteButton__eSBxw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"TaskList_TaskList__1PUZ7\",\"emptyState\":\"TaskList_emptyState__Oahdd\",\"hidden\":\"TaskList_hidden__1K5Uq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2mBMi\",\"taskBody\":\"App_taskBody__2_ikx\"};","import * as moment from 'moment';\n\nexport const putTime = (recordedTime, taskName) => ({\n  type: 'PUT_TIME',\n  recordedTime: recordedTime,\n  taskName: taskName\n});\n\nexport const deleteTime = (recordedTime) => ({\n  type: 'DELETE_TIME',\n  recordedTime: recordedTime\n});\n\nexport const continueTask = (taskName) => {\n  return putTime(\n    moment().format('HH:mm'),\n    taskName\n  );\n};\n\nexport const setCurrentTime = (time) => ({\n  type: 'SET_CURRENT_TIME',\n  time: time\n});\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './EntryForm.module.scss';\n\nclass EntryForm extends Component {\n  state = {\n    editMode: false,\n    recordedTime: '',\n    taskName: ''\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state.recordedTime = this.props.currentTime.format('h:mm a');\n\n    this.enterEditMode = this.enterEditMode.bind(this);\n    this.handleChangeTime = this.handleChangeTime.bind(this);\n    this.recordTimeEntry = this.recordTimeEntry.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n    this.updateTime = this.updateTime.bind(this);\n    this.updateTaskName = this.updateTaskName.bind(this);\n\n    this.timeEntryRef = React.createRef();\n  }\n\n  get timeIcon() {\n    if (this.state.editMode) {\n      return 'img/md-close-circle-outline.svg';\n    }\n\n    return 'img/md-time.svg';\n  }\n\n  get timeValue() {\n    if (this.state.editMode) {\n      return this.state.recordedTime;\n    }\n\n    return this.props.currentTime.format('h:mm a');\n  }\n\n  enterEditMode() {\n    this.setState({\n      editMode: true,\n      recordedTime: this.props.currentTime.format('h:mm a')\n    });\n  }\n\n  formatRecordedTime(currentTime) {\n    currentTime = currentTime.trim().toLowerCase();\n\n    const rxTime = /(\\d+):(\\d+)\\s*(am|pm)?/;\n    const timeParts = currentTime.match(rxTime);\n\n    if (null === timeParts) {\n      return null;\n    }\n\n    if (undefined !== timeParts[3]) {\n      if (timeParts[1] === '12') {\n        timeParts[1] = '0';\n      }\n\n      if (timeParts[3] === 'pm') {\n        timeParts[1] = (parseInt(timeParts[1], 10) + 12).toString();\n      }\n    }\n\n    currentTime = timeParts[1].padStart(2, '0') + ':' + timeParts[2].padStart(2, '0');\n\n    return currentTime;\n  }\n\n  handleChangeTime(event) {\n    this.setState({\n      recordedTime: event.target.value\n    });\n  }\n\n  updateTime(recordedTime) {\n    this.setState({\n      recordedTime: recordedTime\n    });\n  }\n\n  updateTaskName(event) {\n    this.setState({\n      taskName: event.target.value\n    });\n  }\n\n  recordTimeEntry(event) {\n    event.preventDefault();\n\n    let timeEntry = {\n      recordedTime: this.formatRecordedTime(this.state.recordedTime),\n      taskName: this.state.taskName.trim()\n    };\n\n    if (0 < timeEntry.taskName.length && null !== timeEntry.recordedTime) {\n      this.props.recordTimeEntry(timeEntry);\n    }\n\n    this.resetForm();\n  }\n\n  resetForm() {\n    this.setState({\n      editMode: false,\n      recordedTime: this.props.currentTime.format('h:mm a'),\n      taskName: ''\n    });\n  }\n\n  render() {\n    return (\n      <form className={ styles.EntryForm } onSubmit={ this.recordTimeEntry }>\n        <div className={ styles.resetButton }>\n          <button type=\"button\" onClick={ this.resetForm }>\n            <img src={ this.timeIcon } alt=\"Reset\" />\n          </button>\n        </div>\n        <div className={ styles.recordedTime }>\n          <input\n            type=\"text\"\n            value={ this.timeValue }\n            onChange={ this.handleChangeTime }\n            onFocus={ this.enterEditMode }\n          />\n        </div>\n        <div className={ styles.taskName }>\n          <input\n            type=\"text\"\n            placeholder=\"What are you working on?\"\n            value={ this.state.taskName }\n            onChange={ this.updateTaskName }\n          />\n        </div>\n        <div className={ styles.startButton }>\n          <button type=\"submit\">Start</button>\n        </div>\n      </form>\n    )\n  }\n}\n\nEntryForm.propTypes = {\n  currentTime: PropTypes.object.isRequired,\n  recordTimeEntry: PropTypes.func.isRequired\n}\n\nexport default EntryForm;\n","import { connect } from 'react-redux'\nimport { putTime } from '../actions'\nimport EntryForm from '../components/EntryForm/EntryForm'\n\nconst mapStateToProps = (state, ownProps) => ({\n  currentTime: state.currentTime\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  recordTimeEntry: (timeEntry) => dispatch(putTime(\n    timeEntry.recordedTime,\n    timeEntry.taskName\n  ))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EntryForm)\n","import {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormattedDuration extends Component {\n  render() {\n    const totalMinutes = parseInt(this.props.duration, 10);\n    const hours = Math.floor(totalMinutes / 60).toString();\n    const minutes = (totalMinutes - (hours * 60)).toString().padStart(2, '0');\n\n    return hours + ':' + minutes;\n  }\n}\n\nFormattedDuration.propTypes = {\n    duration: PropTypes.number.isRequired\n}\n\nexport default FormattedDuration;\n","import {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport * as moment from 'moment';\n\nclass FormattedTime extends Component {\n\n  render() {\n    return moment('2018-01-01 ' + this.props.time).format('h:mm a');\n  }\n\n}\n\nFormattedTime.propTypes = {\n    time: PropTypes.string.isRequired\n}\n\nexport default FormattedTime;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport FormattedDuration from '../FormattedDuration/FormattedDuration';\nimport FormattedTime from '../FormattedTime/FormattedTime';\nimport styles from './TimeRow.module.scss';\n\nclass TimeRow extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.deleteTime = this.deleteTime.bind(this);\n  }\n\n  deleteTime() {\n    this.props.deleteTime(this.props.time);\n  }\n\n  render() {\n    return (\n      <div className={ styles.TimeRow }>\n        <div className={ styles.duration }>\n          <FormattedDuration duration={ this.props.time.duration }></FormattedDuration>\n        </div>\n        <div className={ styles.recordedTime }>\n          <FormattedTime time={ this.props.time.recordedTime }></FormattedTime>\n        </div>\n        <div className={ styles.deleteButton }>\n          <button type=\"button\" onClick={ this.deleteTime }>Delete</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nTimeRow.propTypes = {\n  time: PropTypes.object.isRequired,\n  deleteTime: PropTypes.func.isRequired\n}\n\nexport default TimeRow;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport FormattedDuration from '../FormattedDuration/FormattedDuration';\nimport TimeRow from '../TimeRow/TimeRow';\nimport styles from './TaskRow.module.scss';\n\nclass TaskRow extends Component {\n  state = {\n    expanded: false\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.continueTask = this.continueTask.bind(this);\n    this.deleteTime = this.deleteTime.bind(this);\n    this.toggleDetails = this.toggleDetails.bind(this);\n  }\n\n  get arrowIcon() {\n    if (this.state.expanded) {\n      return 'img/md-arrow-dropdown.svg';\n    }\n\n    return 'img/md-arrow-dropright.svg';\n  }\n\n  toggleDetails() {\n    this.setState({\n      expanded: !this.state.expanded\n    });\n  }\n\n  continueTask() {\n    this.props.continueTask(this.props.task);\n  }\n\n  deleteTime(time) {\n    this.props.deleteTime(time);\n  }\n\n  render() {\n    return (\n      <div className={ styles.TaskRow }>\n        <div className={ styles.summary }>\n          <div className={ styles.toggleButton }>\n            <button type=\"button\" onClick={ this.toggleDetails }>\n              <img src={ this.arrowIcon } alt=\"Toggle\" />\n            </button>\n          </div>\n          <div className={ styles.duration }>\n            <FormattedDuration duration={ this.props.task.duration }></FormattedDuration>\n          </div>\n          <div className={ styles.taskName }>\n            { this.props.task.taskName }\n          </div>\n          <div className={ styles.continueButton }>\n            <button type=\"button\" onClick={ this.continueTask }>Continue</button>\n          </div>\n        </div>\n        <div className={ this.state.expanded ? styles.details : styles.hidden }>\n        {this.props.task.timeEntries.map((time, i) => {\n          return (\n            <TimeRow\n              key={ time.recordedTime }\n              time={ time }\n              deleteTime={ this.deleteTime }\n            ></TimeRow>\n          )\n        })}\n        </div>\n      </div>\n    )\n  }\n}\n\nTaskRow.propTypes = {\n  task: PropTypes.object.isRequired,\n  continueTask: PropTypes.func.isRequired,\n  deleteTime: PropTypes.func.isRequired\n}\n\nexport default TaskRow;\n","import { connect } from 'react-redux';\nimport { continueTask, deleteTime } from '../actions';\nimport TaskRow from '../components/TaskRow/TaskRow';\n\nconst mapStateToProps = (state, ownProps) => ({\n  task: ownProps.task\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  continueTask: () => dispatch(continueTask(\n    ownProps.task.taskName\n  )),\n\n  deleteTime: (task) => dispatch(deleteTime(\n    task.recordedTime\n  ))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TaskRow)\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport TaskRowContainer from '../../containers/TaskRowContainer';\nimport styles from './TaskList.module.scss';\n\nclass TaskList extends Component {\n\n  render() {\n    return (\n      <div className={ styles.TaskList }>\n        <div className={ 0 === this.props.tasks.length ? styles.emptyState : styles.hidden }>\n          There are no tasks recorded.\n        </div>\n        {this.props.tasks.map((task, i) => {\n          return (\n            <TaskRowContainer\n              key={ task.taskName }\n              task={ task }\n            ></TaskRowContainer>\n          )\n        })}\n      </div>\n    )\n  }\n\n}\n\nTaskList.propTypes = {\n  tasks: PropTypes.array.isRequired\n}\n\nexport default TaskList;\n","import { connect } from 'react-redux'\nimport TaskList from '../components/TaskList/TaskList'\n\nconst mapStateToProps = (state, ownProps) => ({\n  tasks: recordedTasks(state)\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n})\n\nconst recordedTasks = (state) => {\n  let taskIndex = state.times.reduce((taskIndex, timeEntry) => {\n    if (undefined === taskIndex[timeEntry.taskName]) {\n      taskIndex[timeEntry.taskName] = {\n        taskName: timeEntry.taskName,\n        recordedTime: timeEntry.recordedTime,\n        duration: 0,\n        timeEntries: []\n      };\n    }\n\n    taskIndex[timeEntry.taskName].duration += timeEntry.duration;\n    taskIndex[timeEntry.taskName].timeEntries.push(timeEntry);\n\n    return taskIndex;\n  }, {});\n\n  return Object.values(taskIndex).sort((a, b) => {\n    return b.recordedTime.localeCompare(a.recordedTime);\n  });\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TaskList)\n","import React, {Component} from 'react';\nimport EntryFormContainer from '../../containers/EntryFormContainer';\nimport TaskListContainer from '../../containers/TaskListContainer';\nimport styles from './App.module.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={ styles.App }>\n        <EntryFormContainer></EntryFormContainer>\n        <div className={ styles.taskBody }>\n          <TaskListContainer></TaskListContainer>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const currentTime = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_CURRENT_TIME':\n      return action.time;\n    default:\n      return state;\n  }\n};\n\nexport default currentTime\n","import * as moment from 'moment';\n\nconst tasks = (state = [], action) => {\n  let i;\n\n  switch (action.type) {\n    case 'PUT_TIME':\n      i = state.findIndex((timeEntry) => {\n        return action.recordedTime === timeEntry.recordedTime;\n      });\n\n      let newState;\n\n      if (-1 === i) {\n        newState = state;\n      } else {\n        newState = [\n          ...state.slice(0, i),\n          ...state.slice(i + 1)\n        ];\n      }\n\n      return [\n        ...newState,\n        {\n          recordedTime: action.recordedTime,\n          taskName: action.taskName\n        }\n      ]\n      .sort(reorderState)\n      .map(recalculateDurations);\n    case 'DELETE_TIME':\n      i = state.findIndex((timeEntry) => {\n        return action.recordedTime === timeEntry.recordedTime;\n      });\n\n      if (-1 === i) {\n        return state;\n      }\n\n      return [\n        ...state.slice(0, i),\n        ...state.slice(i + 1)\n      ].map(recalculateDurations);\n    case 'SET_CURRENT_TIME':\n      if (0 === state.length) {\n        return state;\n      }\n\n      let latest = Object.assign({}, state[0]);\n      latest.duration = action.time.diff(\n        action.time.format('YYYY-MM-DD ') + latest.recordedTime + ':00',\n        'minutes'\n      );\n\n      return [\n        latest,\n        ...state.slice(1)\n      ];\n    default:\n      return state\n  }\n};\n\nconst reorderState = (a, b) => {\n  return b.recordedTime.localeCompare(a.recordedTime);\n};\n\nconst recalculateDurations = (currentTime, index, state) => {\n  let today = moment().format('YYYY-MM-DD ');\n  let nextTime = null;\n\n  if (undefined === state[index - 1]) {\n    nextTime = moment().startOf('minute').format('HH:mm');\n  } else {\n    nextTime = state[index - 1].recordedTime;\n  }\n\n  let duration = Math.max(0, parseInt(\n    moment(today + nextTime + ':00')\n      .diff(today + currentTime.recordedTime + ':00', 'minutes'),\n    10\n  ));\n\n  if (currentTime.duration === duration) {\n    return currentTime;\n  }\n\n  return Object.assign({}, currentTime, {\n    duration: duration\n  });\n};\n\nexport default tasks\n","import { combineReducers } from 'redux'\nimport currentTime from './currentTime';\nimport times from './times'\n\nexport default combineReducers({\n  currentTime: currentTime,\n  times: times\n})\n","import React from 'react';\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App/App';\nimport { setCurrentTime } from './actions';\nimport rootReducer from './reducers'\nimport * as moment from 'moment';\n\nconst store = createStore(rootReducer)\n\nconst timeoutSeconds = 60 - parseInt(moment().format('s'), 10);\nconst updateCurrentTime = () => {\n  store.dispatch(setCurrentTime(moment().startOf('minute')));\n};\n\nupdateCurrentTime();\n\n// First update duration at next minute change\nsetTimeout(() => {\n  updateCurrentTime();\n\n  setInterval(updateCurrentTime, 60000);\n}, timeoutSeconds * 1000);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskRow\":\"TaskRow_TaskRow__2w8y9\",\"summary\":\"TaskRow_summary__dfiTx\",\"toggleButton\":\"TaskRow_toggleButton__2dMw-\",\"duration\":\"TaskRow_duration__3l7LC\",\"taskName\":\"TaskRow_taskName__jbgSc\",\"continueButton\":\"TaskRow_continueButton__1CMeY\",\"hidden\":\"TaskRow_hidden__hmhEP\"};"],"sourceRoot":""}